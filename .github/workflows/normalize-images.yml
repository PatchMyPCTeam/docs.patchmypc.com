name: Normalize GitBook assets for Git it Write

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: normalize-assets-${{ github.ref }}
  cancel-in-progress: true

jobs:
  normalize:
    if: ${{ github.actor != 'github-actions[bot]' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Configure author
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Update to latest main (rebase)
        run: |
          git fetch origin main
          git checkout main
          git rebase origin/main

      - name: Ensure _images exists (flat)
        run: mkdir -p _images

      - name: Copy from .gitbook/assets → _images (flat)
        shell: bash
        run: |
          set -euo pipefail
          if [ -d ".gitbook/assets" ]; then
            # copy every file from .gitbook/assets/* → _images/<basename>
            while IFS= read -r -d '' src; do
              base="$(basename "$src")"
              if [ -e "_images/$base" ] && ! cmp -s "$src" "_images/$base"; then
                echo "::warning::Duplicate filename '$base' — overwriting with last copy."
              fi
              cp -f "$src" "_images/$base"
            done < <(find .gitbook/assets -type f -print0)
          fi
      

      # Convert <figure><img ...><figcaption>...</figcaption></figure> → ![alt](/_images/file "title")
      - name: Convert <figure><img> to Markdown images (RELATIVE)
        shell: bash
        run: |
          set -euo pipefail
          python3 - <<'PY'
          import re, glob, html, os

          def enc(u): return u.replace(' ', '%20').replace('(', '%28').replace(')', '%29')

          FIG = re.compile(r'<figure\b[^>]*>(.*?)</figure>', re.I|re.S)
          IMG = re.compile(r'<img\b[^>]*>', re.I|re.S)
          CAP = re.compile(r'<figcaption\b[^>]*>(.*?)</figcaption>', re.I|re.S)
          def attr(n,s):
            m=re.search(rf'\b{n}\s*=\s*["\']([^"\']*)["\']', s, re.I|re.S)
            return m.group(1).strip() if m else ''

          md_files = [p for g in ["**/*.md","**/*.MD","**/*.mdx","**/*.MDX","**/*.markdown","**/*.MARKDOWN"]
                      for p in glob.glob(g, recursive=True)]

          for path in md_files:
            # compute "../" depth for relative prefix
            depth = 0 if os.path.dirname(path)=='' else os.path.dirname(path).count('/')+1
            prefix = "" if depth==0 else "../"*depth

            def convert(block):
              m=IMG.search(block)
              if not m: return block
              img=m.group(0)
              src=attr('src',img); alt=attr('alt',img)
              mcap=CAP.search(block)
              caption = html.unescape(re.sub(r'<[^>]+>','',mcap.group(1))).strip() if mcap else ""
              title = caption or alt

              # strip anything before /_images/, flatten gitbook/, then make RELATIVE
              src = re.sub(r'^[^"\']*?/_images/', '_images/', src)
              src = src.replace(' _images/','_images/')        # just in case stray spaces
              src = src.replace('_images/gitbook/','_images/')
              src = prefix + src
              src = enc(src)

              alt = alt.replace(']','\\]')
              title = title.replace('“','"').replace('”','"').replace('"','\\"')
              return f'![{alt}]({src} "{title}")'

            t=open(path,encoding='utf-8').read()
            n=FIG.sub(lambda m: convert(m.group(0)), t)
            if n!=t:
              open(path,'w',encoding='utf-8').write(n)
              print(f"Converted figures in: {path}")
          PY
    

      # Rewrite ALL image links to site-root /_images/<file>; strip any prefix; flatten gitbook segment; encode spaces/()
      - name: Rewrite links to RELATIVE _images/* (depth-aware, strips prefixes)
        shell: bash
        run: |
          set -euo pipefail
          python3 - <<'PY'
          import re, glob, os
          def enc(u): return u.replace(' ', '%20').replace('(', '%28').replace(')', '%29')

          files=[p for g in ["**/*.md","**/*.MD","**/*.mdx","**/*.MDX","**/*.markdown","**/*.MARKDOWN"]
                 for p in glob.glob(g, recursive=True)]

          for path in files:
            depth = 0 if os.path.dirname(path)=='' else os.path.dirname(path).count('/')+1
            prefix = "" if depth==0 else "../"*depth

            s=open(path,encoding='utf-8').read(); o=s

            # .gitbook/assets → _images
            s=s.replace("/.gitbook/assets/","/_images/").replace("_images/gitbook/","_images/")

            # ANY prefix before _images → make it RELATIVE (md inline)
            s=re.sub(r"\]\(\s*<?[^)\s\"']*?/_images/([^)\s\"'>]+)", r"]("+prefix+r"_images/\1", s)

            # HTML src=... → RELATIVE
            s=re.sub(r'\bsrc\s*=\s*"[^"]*?/_images/([^"]+)"', r'src="'+prefix+r'_images/\1"', s)
            s=re.sub(r"\bsrc\s*=\s*'[^']*?/_images/([^']+)'", r"src='"+prefix+r"_images/\1'", s)

            # Reference-style
            s=re.sub(r'(?im)^(\[[^\]]+\]:\s*)[^\s]*?/_images/(\S+)$', r'\1'+prefix+r'_images/\2', s)

            # Percent-encode in final targets
            s=re.sub(r"\]\(([^)\n]*?_images/[^)\n]*)\)", lambda m: "]("+enc(m.group(1))+")", s)
            s=re.sub(r'src="([^"]*?_images/[^"]*)"', lambda m: 'src="'+enc(m.group(1))+'"', s)
            s=re.sub(r"src='([^']*?_images/[^']*)'", lambda m: "src='"+enc(m.group(1))+"'", s)
            s=re.sub(r'(?im)^(\[[^\]]+\]:\s*)([^ \t]+_images/\S+)$',
                     lambda m: m.group(1)+enc(m.group(2)), s)

            if s!=o:
              open(path,'w',encoding='utf-8').write(s)
              print(f"Rewrote: {path}")
          PY
      
      
      

      - name: Commit changes (if any)
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git add -A
            git commit -m "Normalize images and links for Git it Write [ci skip]"
          else
            echo "No changes to commit."
          fi

      - name: Rebase on latest and push (retry with --force-with-lease)
        shell: bash
        run: |
          set -euo pipefail
          
          # Always have the latest remote state locally
          git fetch origin main --prune
          
          # Short-circuit if we have nothing new to push
          if [ "$(git rev-list --count HEAD ^origin/main)" -eq 0 ]; then
            echo "No new commits to push."
            exit 0
          fi
          
          # Try to push up to 3 times, rebasing if needed
          for attempt in 1 2 3; do
            echo "Push attempt $attempt..."
            if git push --force-with-lease; then
              echo "Pushed successfully."
              exit 0
            fi
            echo "Push rejected. Rebasing onto latest origin/main..."
            git rebase origin/main
            sleep 2
          done
          
          echo "Giving up after 3 attempts."
          exit 1
     
