name: Normalize GitBook assets for Git it Write

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: normalize-assets-${{ github.ref }}
  cancel-in-progress: true

jobs:
  normalize:
    if: ${{ github.actor != 'github-actions[bot]' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Configure author
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Update to latest main (rebase)
        run: |
          git fetch origin main
          git checkout main
          git rebase origin/main

      - name: Ensure _images exists (flat)
        run: mkdir -p _images

      - name: Copy from .gitbook/assets → _images (flat)
        shell: bash
        run: |
          set -euo pipefail
          if [ -d ".gitbook/assets" ]; then
            # copy every file from .gitbook/assets/* → _images/<basename>
            while IFS= read -r -d '' src; do
              base="$(basename "$src")"
              if [ -e "_images/$base" ] && ! cmp -s "$src" "_images/$base"; then
                echo "::warning::Duplicate filename '$base' — overwriting with last copy."
              fi
              cp -f "$src" "_images/$base"
            done < <(find .gitbook/assets -type f -print0)
          fi
      

      # Convert <figure><img ...><figcaption>...</figcaption></figure> → ![alt](/_images/file "title")
      - name: Convert <figure><img> to Markdown images
        shell: bash
        run: |
          set -euo pipefail
          python3 - <<'PY'
          import re, glob, html
          def enc(u): return u.replace(' ', '%20').replace('(', '%28').replace(')', '%29')
          FIG = re.compile(r'<figure\b[^>]*>(.*?)</figure>', re.I|re.S)
          IMG = re.compile(r'<img\b[^>]*>', re.I|re.S)
          CAP = re.compile(r'<figcaption\b[^>]*>(.*?)</figcaption>', re.I|re.S)
          def attr(n,s): 
              m=re.search(rf'\b{n}\s*=\s*["\']([^"\']*)["\']', s, re.I|re.S); 
              return m.group(1).strip() if m else ''
          def convert(block):
              m=IMG.search(block); 
              if not m: return block
              img=m.group(0)
              src=attr('src',img); alt=attr('alt',img)
              mcap=CAP.search(block); cap=html.unescape(re.sub(r'<[^>]+>','',mcap.group(1))).strip() if mcap else ''
              title=cap or alt
              src=re.sub(r'^[^"\']*?/_images/','/_images/',src).replace('/_images/gitbook/','/_images/')
              src=enc(src); alt=alt.replace(']','\\]')
              title=title.replace('“','"').replace('”','"').replace('"','\\"')
              return f'![{alt}]({src} "{title}")'
          files=[]
          for g in ["**/*.md","**/*.MD","**/*.mdx","**/*.MDX","**/*.markdown","**/*.MARKDOWN"]:
              files.extend(glob.glob(g, recursive=True))
          for p in files:
              t=open(p,encoding="utf-8").read()
              n=FIG.sub(lambda m: convert(m.group(0)), t)
              if n!=t:
                  open(p,"w",encoding="utf-8").write(n)
                  print(f"Converted figures in: {p}")
          PY

      # Rewrite ALL image links to site-root /_images/<file>; strip any prefix; flatten gitbook segment; encode spaces/()
      - name: Rewrite links to /_images/* (Python)
        shell: bash
        run: |
          set -euo pipefail
          python3 - <<'PY'
          import re, glob
          def enc(u): return u.replace(' ', '%20').replace('(', '%28').replace(')', '%29')
          globs = ["**/*.md","**/*.MD","**/*.mdx","**/*.MDX","**/*.markdown","**/*.MARKDOWN"]
          files=[p for g in globs for p in glob.glob(g, recursive=True)]

          def strip_md_inline(s):
              return re.sub(r"\]\(\s*<?[^)\s\"']*?/_images/([^)\s\"'>]+)", r"](/_images/\1", s)
          def strip_html_src(s):
              s=re.sub(r'\bsrc\s*=\s*"[^"]*?/_images/([^"]+)"', r'src="/_images/\1"', s)
              s=re.sub(r"\bsrc\s*=\s*'[^']*?/_images/([^']+)'", r"src='/_images/\1'", s)
              return s
          def strip_ref_links(s):
              return re.sub(r'(?im)^(\[[^\]]+\]:\s*)[^\s]*?/_images/(\S+)$', r'\1/_images/\2', s)

          for p in files:
              s=open(p,encoding="utf-8").read(); o=s
              s=s.replace("/.gitbook/assets/","/_images/")                       # dot-folder → _images
              s=re.sub(r"\]\(\s*<?(?:(?:\.\./|\.?/)+)?_images/","](/_images/",s) # ../ or ./ → /
              s=re.sub(r'\bsrc\s*=\s*"(?:(?:\.\./|\.?/)+)?_images/','src="/_images/',s)
              s=re.sub(r"\bsrc\s*=\s*'(?:(?:\.\./|\.?/)+)?_images/","src='/_images/",s)
              s=re.sub(r'(?im)^(\[[^\]]+\]:\s*)(?:(?:\.\./|\.?/)+)?_images/', r"\1/_images/", s)
              s=strip_md_inline(s); s=strip_html_src(s); s=strip_ref_links(s)   # drop domains / raw / blob / folders before /_images
              s=s.replace("/_images/gitbook/","/_images/")                      # flatten 'gitbook' subfolder
              s=re.sub(r"\]\((/_images/[^\s\)]*)", lambda m: "]("+enc(m.group(1)), s) # encode
              s=re.sub(r'src="(/_images/[^"]*)"', lambda m: 'src="'+enc(m.group(1))+'"', s)
              s=re.sub(r"src='(/_images/[^']*)'", lambda m: "src='"+enc(m.group(1))+"'", s)
              s=re.sub(r'(?im)^(\[[^\]]+\]:\s*)(/_images/\S+)', lambda m: m.group(1)+enc(m.group(2)), s)
              if s!=o:
                  open(p,"w",encoding="utf-8").write(s)
                  print(f"Rewrote: {p}")
          PY

      # (Optional) Strict validator — delete this step if you don't want failures on style drift
      - name: Validate image links style (/_images/* only)
        shell: bash
        run: |
          set -euo pipefail
          python3 - <<'PY'
          import re, glob, sys
          exts=r"(png|jpe?g|gif|webp|svg)"
          md=re.compile(r"!\[[^\]]*\]\(([^)\s]+)")
          html=re.compile(r'\bsrc=["\']([^"\']+)["\']', re.I)
          isimg=re.compile(rf"\.({exts})(?:$|\?)", re.I)
          bad=[]; files=[]
          for g in ["**/*.md","**/*.MD","**/*.mdx","**/*.MDX","**/*.markdown","**/*.MARKDOWN"]:
              files+=glob.glob(g, recursive=True)
          def non_ok(u):
              if not isimg.search(u): return False
              if not u.startswith("/_images/"): return True
              return "/" in u[len("/_images/"):].strip("/")
          for p in files:
              s=open(p,encoding="utf-8").read()
              bad += [(p,u.strip()) for u in md.findall(s) if non_ok(u.strip())]
              bad += [(p,u.strip()) for u in html.findall(s) if non_ok(u.strip())]
          if bad:
              print("Non-compliant image links:")
              for p,u in bad: print(f"- {p}: {u}")
              sys.exit(1)
          print("All image links are /_images/<file> (flat).")
          PY

      - name: Commit changes (if any)
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git add -A
            git commit -m "Normalize images and links for Git it Write [ci skip]"
          else
            echo "No changes to commit."
          fi

      - name: Rebase on latest and push (retry with --force-with-lease)
        shell: bash
        run: |
          if [ -z "$(git log origin/main..HEAD)" ]; then
            echo "No new commits to push."
            exit 0
          fi
          for a in 1 2 3; do
            echo "Push attempt $a..."
            if git push --force-with-lease; then exit 0; fi
            git fetc
